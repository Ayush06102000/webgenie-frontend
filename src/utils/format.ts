export const formatData="Sure! I'll create a simple Todo app using React. We'll use Vite for the development server and react-spring for animations.\n\n<boltArtifact id=\"todo-app\" title=\"Todo App in React\">\n  <boltAction type=\"file\" filePath=\"package.json\">\n    {\n      \"name\": \"todo-app\",\n      \"private\": true,\n      \"version\": \"0.0.0\",\n      \"type\": \"module\",\n      \"scripts\": {\n        \"dev\": \"vite\",\n        \"build\": \"vite build\",\n        \"preview\": \"vite preview\"\n      },\n      \"dependencies\": {\n        \"react\": \"^18.2.0\",\n        \"react-dom\": \"^18.2.0\",\n        \"react-spring\": \"^9.7.1\"\n      },\n      \"devDependencies\": {\n        \"@types/react\": \"^18.0.28\",\n        \"@types/react-dom\": \"^18.0.11\",\n        \"@vitejs/plugin-react\": \"^3.1.0\",\n        \"vite\": \"^4.2.0\"\n      }\n    }\n  </boltAction>\n\n  <boltAction type=\"file\" filePath=\"index.html\">\n    <!DOCTYPE html>\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <title>Todo App</title>\n      </head>\n      <body>\n        <div id=\"root\"></div>\n        <script type=\"module\" src=\"/src/main.jsx\"></script>\n      </body>\n    </html>\n  </boltAction>\n\n  <boltAction type=\"file\" filePath=\"src/main.jsx\">\n    import React from 'react';\n    import ReactDOM from 'react-dom/client';\n    import App from './App';\n    import './index.css';\n\n    ReactDOM.createRoot(document.getElementById('root')).render(\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    );\n  </boltAction>\n\n  <boltAction type=\"file\" filePath=\"src/index.css\">\n    body {\n      font-family: Arial, sans-serif;\n      background-color: #f0f0f0;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      height: 100vh;\n      margin: 0;\n    }\n\n    .todo-app {\n      background: white;\n      padding: 20px;\n      border-radius: 8px;\n      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n      width: 300px;\n    }\n\n    .todo-app h1 {\n      text-align: center;\n    }\n\n    .todo-list {\n      list-style: none;\n      padding: 0;\n    }\n\n    .todo-item {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: 10px;\n      border-bottom: 1px solid #ddd;\n    }\n\n    .todo-item.completed {\n      text-decoration: line-through;\n      color: #aaa;\n    }\n\n    .todo-form {\n      display: flex;\n      justify-content: space-between;\n    }\n\n    .todo-form input {\n      flex: 1;\n      padding: 10px;\n      border: 1px solid #ddd;\n      border-radius: 4px;\n    }\n\n    .todo-form button {\n      padding: 10px;\n      border: none;\n      background: #28a745;\n      color: white;\n      border-radius: 4px;\n      cursor: pointer;\n    }\n\n    .todo-form button:hover {\n      background: #218838;\n    }\n  </boltAction>\n\n  <boltAction type=\"file\" filePath=\"src/App.jsx\">\n    import React, { useState } from 'react';\n    import { useSpring, animated } from 'react-spring';\n\n    const App = () => {\n      const [todos, setTodos] = useState([]);\n      const [input, setInput] = useState('');\n\n      const addTodo = () => {\n        if (input.trim()) {\n          setTodos([...todos, { text: input, completed: false }]);\n          setInput('');\n        }\n      };\n\n      const toggleTodo = (index) => {\n        const newTodos = [...todos];\n        newTodos[index].completed = !newTodos[index].completed;\n        setTodos(newTodos);\n      };\n\n      const removeTodo = (index) => {\n        const newTodos = todos.filter((_, i) => i !== index);\n        setTodos(newTodos);\n      };\n\n      const fadeIn = useSpring({ opacity: 1, from: { opacity: 0 } });\n\n      return (\n        <animated.div className=\"todo-app\" style={fadeIn}>\n          <h1>Todo App</h1>\n          <div className=\"todo-form\">\n            <input\n              type=\"text\"\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n              placeholder=\"Add a new todo\"\n            />\n            <button onClick={addTodo}>Add</button>\n          </div>\n          <ul className=\"todo-list\">\n            {todos.map((todo, index) => (\n              <li\n                key={index}\n                className={`todo-item ${todo.completed ? 'completed' : ''}`}\n              >\n                <span onClick={() => toggleTodo(index)}>{todo.text}</span>\n                <button onClick={() => removeTodo(index)}>Remove</button>\n              </li>\n            ))}\n          </ul>\n        </animated.div>\n      );\n    };\n\n    export default App;\n  </boltAction>\n\n  <boltAction type=\"shell\">\n    npm install\n  </boltAction>\n\n  <boltAction type=\"shell\">\n    npm run dev\n  </boltAction>\n</boltArtifact>\n\nYou can now view the Todo app by opening the provided local server URL in your browser. Use the input field to add new todos, click on a todo to mark it as completed, and click the \"Remove\" button to delete a todo."